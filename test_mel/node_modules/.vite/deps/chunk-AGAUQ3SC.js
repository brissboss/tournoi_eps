import {
  getCurrentInstanceName,
  propsFactory
} from "./chunk-UAFO23PA.js";
import {
  computed,
  isRef
} from "./chunk-4GLNT6BV.js";

// node_modules/.pnpm/vuetify@3.5.14_typescript@5.4.3_vite-plugin-vuetify@2.0.3_vue@3.4.21/node_modules/vuetify/lib/composables/rounded.mjs
var makeRoundedProps = propsFactory({
  rounded: {
    type: [Boolean, Number, String],
    default: void 0
  },
  tile: Boolean
}, "rounded");
function useRounded(props) {
  let name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : getCurrentInstanceName();
  const roundedClasses = computed(() => {
    const rounded = isRef(props) ? props.value : props.rounded;
    const tile = isRef(props) ? props.value : props.tile;
    const classes = [];
    if (rounded === true || rounded === "") {
      classes.push(`${name}--rounded`);
    } else if (typeof rounded === "string" || rounded === 0) {
      for (const value of String(rounded).split(" ")) {
        classes.push(`rounded-${value}`);
      }
    } else if (tile) {
      classes.push("rounded-0");
    }
    return classes;
  });
  return {
    roundedClasses
  };
}

// node_modules/.pnpm/vuetify@3.5.14_typescript@5.4.3_vite-plugin-vuetify@2.0.3_vue@3.4.21/node_modules/vuetify/lib/composables/density.mjs
var allowedDensities = [null, "default", "comfortable", "compact"];
var makeDensityProps = propsFactory({
  density: {
    type: String,
    default: "default",
    validator: (v) => allowedDensities.includes(v)
  }
}, "density");
function useDensity(props) {
  let name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : getCurrentInstanceName();
  const densityClasses = computed(() => {
    return `${name}--density-${props.density}`;
  });
  return {
    densityClasses
  };
}

export {
  makeRoundedProps,
  useRounded,
  makeDensityProps,
  useDensity
};
//# sourceMappingURL=chunk-AGAUQ3SC.js.map
