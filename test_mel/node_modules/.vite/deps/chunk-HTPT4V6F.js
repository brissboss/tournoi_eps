import {
  IN_BROWSER,
  refElement
} from "./chunk-UAFO23PA.js";
import {
  onBeforeUnmount,
  readonly,
  ref,
  watch
} from "./chunk-4GLNT6BV.js";

// node_modules/.pnpm/vuetify@3.5.14_typescript@5.4.3_vite-plugin-vuetify@2.0.3_vue@3.4.21/node_modules/vuetify/lib/composables/resizeObserver.mjs
function useResizeObserver(callback) {
  let box = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "content";
  const resizeRef = ref();
  const contentRect = ref();
  if (IN_BROWSER) {
    const observer = new ResizeObserver((entries) => {
      callback == null ? void 0 : callback(entries, observer);
      if (!entries.length)
        return;
      if (box === "content") {
        contentRect.value = entries[0].contentRect;
      } else {
        contentRect.value = entries[0].target.getBoundingClientRect();
      }
    });
    onBeforeUnmount(() => {
      observer.disconnect();
    });
    watch(resizeRef, (newValue, oldValue) => {
      if (oldValue) {
        observer.unobserve(refElement(oldValue));
        contentRect.value = void 0;
      }
      if (newValue)
        observer.observe(refElement(newValue));
    }, {
      flush: "post"
    });
  }
  return {
    resizeRef,
    contentRect: readonly(contentRect)
  };
}

export {
  useResizeObserver
};
//# sourceMappingURL=chunk-HTPT4V6F.js.map
